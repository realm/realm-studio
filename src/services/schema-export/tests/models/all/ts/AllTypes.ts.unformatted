import * as Realm from "realm";

export type ChildEmbeddedType = {
  id: number;
};

export const ChildEmbeddedTypeSchema = {
  name: 'ChildEmbeddedType',
  embedded: true,
  properties: {
    id: 'int'
  }
};

export type IndexedTypes = {
  boolIndexed: boolean;
  intIndexed: number;
  stringIndexed: string;
  dateIndexed: Date;
};

export const IndexedTypesSchema = {
  name: 'IndexedTypes',
  primaryKey: 'intIndexed',
  properties: {
    boolIndexed: { type: 'bool', indexed: true },
    intIndexed: 'int',
    stringIndexed: { type: 'string', indexed: true },
    dateIndexed: { type: 'date', indexed: true }
  }
};

export type LinkTypes = {
  objectType?: ReverseType;
  objectType2?: ReverseType;
  listType: Array<ReverseType>;
};

export const LinkTypesSchema = {
  name: 'LinkTypes',
  properties: {
    objectType: 'ReverseType',
    objectType2: 'ReverseType',
    listType: 'ReverseType[]'
  }
};

export type OptionalTypes = {
  boolOptional?: boolean;
  intOptional?: number;
  floatOptional?: number;
  doubleOptional?: number;
  stringOptional?: string;
  dateOptional?: Date;
  dataOptional?: ArrayBuffer;
  objectIdOptional?: Realm.ObjectId;
  decimal128Optional?: Realm.Decimal128;
  objectOptional?: RequiredTypes;
  boolOptionalArray: Array<boolean | undefined>;
  intOptionalArray: Array<number | undefined>;
  floatOptionalArray: Array<number | undefined>;
  doubleOptionalArray: Array<number | undefined>;
  stringOptionalArray: Array<string | undefined>;
  dateOptionalArray: Array<Date | undefined>;
  dataOptionalArray: Array<ArrayBuffer | undefined>;
  objectIdOptionalArray: Array<Realm.ObjectId | undefined>;
  decimal128OptionalArray: Array<Realm.Decimal128 | undefined>;
};

export const OptionalTypesSchema = {
  name: 'OptionalTypes',
  properties: {
    boolOptional: 'bool?',
    intOptional: 'int?',
    floatOptional: 'float?',
    doubleOptional: 'double?',
    stringOptional: 'string?',
    dateOptional: 'date?',
    dataOptional: 'data?',
    objectIdOptional: 'objectId?',
    decimal128Optional: 'decimal128?',
    objectOptional: 'RequiredTypes',
    boolOptionalArray: 'bool?[]',
    intOptionalArray: 'int?[]',
    floatOptionalArray: 'float?[]',
    doubleOptionalArray: 'double?[]',
    stringOptionalArray: 'string?[]',
    dateOptionalArray: 'date?[]',
    dataOptionalArray: 'data?[]',
    objectIdOptionalArray: 'objectId?[]',
    decimal128OptionalArray: 'decimal128?[]'
  }
};

export type ParentEmbeddedType = {
  objectType?: ChildEmbeddedType;
  listType: Array<ChildEmbeddedType>;
};

export const ParentEmbeddedTypeSchema = {
  name: 'ParentEmbeddedType',
  properties: {
    objectType: 'ChildEmbeddedType',
    listType: 'ChildEmbeddedType[]'
  }
};

export type RequiredTypes = {
  boolRequired: boolean;
  intRequired: number;
  floatRequired: number;
  doubleRequired: number;
  stringRequired: string;
  dateRequired: Date;
  dataRequired: ArrayBuffer;
  objectIdRequired: Realm.ObjectId;
  decimal128Required: Realm.Decimal128;
  boolRequiredArray: Array<boolean>;
  intRequiredArray: Array<number>;
  floatRequiredArray: Array<number>;
  doubleRequiredArray: Array<number>;
  stringRequiredArray: Array<string>;
  dateRequiredArray: Array<Date>;
  dataRequiredArray: Array<ArrayBuffer>;
  objectIdRequiredArray: Array<Realm.ObjectId>;
  decimal128RequiredArray: Array<Realm.Decimal128>;
  objectRequiredArray: Array<RequiredTypes>;
};

export const RequiredTypesSchema = {
  name: 'RequiredTypes',
  properties: {
    boolRequired: 'bool',
    intRequired: 'int',
    floatRequired: 'float',
    doubleRequired: 'double',
    stringRequired: 'string',
    dateRequired: 'date',
    dataRequired: 'data',
    objectIdRequired: 'objectId',
    decimal128Required: 'decimal128',
    boolRequiredArray: 'bool[]',
    intRequiredArray: 'int[]',
    floatRequiredArray: 'float[]',
    doubleRequiredArray: 'double[]',
    stringRequiredArray: 'string[]',
    dateRequiredArray: 'date[]',
    dataRequiredArray: 'data[]',
    objectIdRequiredArray: 'objectId[]',
    decimal128RequiredArray: 'decimal128[]',
    objectRequiredArray: 'RequiredTypes[]'
  }
};

export type ReverseType = {
  links?: LinkTypes;
};

export const ReverseTypeSchema = {
  name: 'ReverseType',
  properties: {
    links: 'LinkTypes'
  }
};

export const Schema = [ChildEmbeddedTypeSchema, IndexedTypesSchema, LinkTypesSchema, OptionalTypesSchema, ParentEmbeddedTypeSchema, RequiredTypesSchema, ReverseTypeSchema];
